# Generated by Django 4.2.7 on 2023-12-07 17:36

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Basis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=60, verbose_name='問題名')),
                ('section', models.PositiveIntegerField(verbose_name='区分')),
                ('category', models.SmallIntegerField(verbose_name='分類')),
                ('level', models.PositiveSmallIntegerField(verbose_name='難易度')),
                ('question', models.TextField(verbose_name='問題文')),
                ('pre_code', models.TextField(blank=True, verbose_name='指定入力（前）')),
                ('post_code', models.TextField(blank=True, verbose_name='指定入力（後）')),
                ('i_range', models.TextField(blank=True, verbose_name='範囲')),
                ('role_code', models.TextField(blank=True, verbose_name='演算コード')),
                ('q_data', models.TextField(blank=True, verbose_name='出題データ')),
                ('c_output', models.TextField(blank=True, verbose_name='要求出力')),
                ('e_answer', models.TextField(blank=True, verbose_name='解答例')),
                ('explanation', models.TextField(blank=True, verbose_name='解説')),
            ],
        ),
        migrations.CreateModel(
            name='Competition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=60, verbose_name='問題名')),
                ('section', models.PositiveIntegerField(verbose_name='区分')),
                ('level', models.PositiveSmallIntegerField(verbose_name='難易度')),
                ('question', models.TextField(verbose_name='問題文')),
                ('input_ex', models.TextField(verbose_name='入力例')),
                ('output_ex', models.TextField(verbose_name='出力例')),
                ('input_data', models.TextField(verbose_name='入力データ')),
                ('output_data', models.TextField(verbose_name='出力データ')),
                ('e_answer', models.TextField(blank=True, verbose_name='解答例')),
                ('explanation', models.TextField(blank=True, verbose_name='解説')),
            ],
        ),
        migrations.CreateModel(
            name='Quartet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=60, verbose_name='問題名')),
                ('section', models.PositiveIntegerField(verbose_name='区分')),
                ('level', models.PositiveSmallIntegerField(verbose_name='難易度')),
                ('question', models.TextField(verbose_name='問題文')),
                ('question_code', models.TextField(blank=True, verbose_name='使用コード')),
                ('choices', models.TextField(verbose_name='選択肢')),
                ('answer_idx', models.PositiveSmallIntegerField(verbose_name='解答番号')),
                ('explanation', models.TextField(blank=True, verbose_name='解説')),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('s_output', models.TextField(blank=True)),
                ('s_answer', models.TextField(blank=True)),
                ('s_explain', models.TextField(blank=True)),
                ('c_number', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('a_number', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
