# Generated by Django 5.0 on 2024-01-13 13:26

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Basis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=60, verbose_name='問題内容')),
                ('unit', models.PositiveIntegerField(verbose_name='大区分')),
                ('section', models.PositiveSmallIntegerField(verbose_name='小区分')),
                ('category', models.SmallIntegerField(verbose_name='分類')),
                ('level', models.PositiveSmallIntegerField(verbose_name='難易度')),
                ('question', models.TextField(verbose_name='問題文')),
                ('pre_code', models.TextField(blank=True, verbose_name='指定入力（前）')),
                ('pre_visual', models.TextField(blank=True, verbose_name='入力視像（前）')),
                ('post_code', models.TextField(blank=True, verbose_name='指定入力（後）')),
                ('post_visual', models.TextField(blank=True, verbose_name='入力視像（後）')),
                ('i_range', models.TextField(blank=True, verbose_name='範囲[]/gvc/')),
                ('g_range', models.TextField(blank=True, verbose_name='範囲の範囲')),
                ('role_code', models.TextField(blank=True, verbose_name='演算コード')),
                ('q_data', models.TextField(blank=True, verbose_name='出題データ/Qend')),
                ('c_output', models.TextField(blank=True, verbose_name='要求出力/Qend')),
                ('e_answer', models.TextField(blank=True, verbose_name='解答例/Qend')),
                ('explanation', models.TextField(blank=True, verbose_name='解説')),
                ('q_key', models.BooleanField(default=False, verbose_name='フィルター用')),
                ('major_h', models.CharField(blank=True, max_length=20, verbose_name='問題グループ')),
                ('minor_h', models.CharField(blank=True, max_length=20, verbose_name='問題名')),
            ],
        ),
        migrations.CreateModel(
            name='Competition',
            fields=[
                ('primary_key', models.PositiveIntegerField(primary_key=True, serialize=False, verbose_name='primary_key')),
                ('title', models.CharField(max_length=60, verbose_name='問題名')),
                ('section', models.PositiveIntegerField(verbose_name='区分')),
                ('level', models.PositiveSmallIntegerField(verbose_name='難易度')),
                ('question', models.TextField(verbose_name='問題文')),
                ('input_format', models.TextField(blank=True, verbose_name='入力フォーマット')),
                ('expectation', models.TextField(blank=True, verbose_name='期待出力')),
                ('condition', models.TextField(blank=True, verbose_name='条件')),
                ('input_ex', models.TextField(default='/separate/', verbose_name='入力例')),
                ('output_ex', models.TextField(default='/separate/', verbose_name='出力例')),
                ('input_data', models.TextField(default='/separate/', verbose_name='入力データ')),
                ('output_data', models.TextField(default='/separate/', verbose_name='出力データ')),
                ('e_answer', models.TextField(blank=True, verbose_name='解答例')),
                ('explanation', models.TextField(blank=True, verbose_name='解説')),
            ],
        ),
        migrations.CreateModel(
            name='IntroCourse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=60, verbose_name='タイトル')),
                ('section', models.PositiveIntegerField(verbose_name='区分')),
                ('order', models.PositiveSmallIntegerField(verbose_name='順番')),
                ('text_type', models.CharField(blank=True, choices=[('heading', '見出し'), ('text', 'テキスト'), ('red', '赤枠'), ('yellow', '黄枠'), ('blue', '青枠'), ('green', '緑枠'), ('img', '画像')], max_length=20, verbose_name='タイプ')),
                ('content', models.TextField(blank=True, verbose_name='内容')),
            ],
        ),
        migrations.CreateModel(
            name='Quartet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=60, verbose_name='問題名')),
                ('unit', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='大区分')),
                ('section', models.PositiveIntegerField(verbose_name='区分')),
                ('level', models.PositiveSmallIntegerField(verbose_name='難易度')),
                ('question', models.TextField(default='以下のコードを実行した時の出力として正しいものを選択してください。', verbose_name='問題文')),
                ('question_code', models.TextField(blank=True, verbose_name='問題（コード）')),
                ('choices1', models.TextField(blank=True, verbose_name='選択肢1')),
                ('choices2', models.TextField(blank=True, verbose_name='選択肢2')),
                ('choices3', models.TextField(blank=True, verbose_name='選択肢3')),
                ('choices4', models.TextField(blank=True, verbose_name='選択肢4')),
                ('answer_idx', models.PositiveSmallIntegerField(verbose_name='解答番号')),
                ('explanation', models.TextField(blank=True, verbose_name='解説')),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='CompeResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.PositiveIntegerField(verbose_name='ユーザーID')),
                ('result', models.BooleanField(verbose_name='結果')),
                ('connection_key', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to='python_learning_app.competition')),
            ],
        ),
    ]
