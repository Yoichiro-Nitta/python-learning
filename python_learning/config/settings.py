"""
Django settings for python_learning project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path
import json


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'python_learning_app',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'ja'

TIME_ZONE = 'Asia/Tokyo'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static'),]



# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'python_learning_app.CustomUser'

LOGIN_URL = 'python_learning:login_req'


if "EMAIL_HOST" and "EMAIL_HOST_PASS" in os.environ:
    e_mail = os.environ["EMAIL_HOST"]
    password = os.environ["EMAIL_HOST_PASS"]
else:
    with open("settings.json", "r", encoding="utf-8") as f:
        data = json.load(f)

    e_mail = data["EMAIL_HOST"]
    password = data["EMAIL_HOST_PASS"]

# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' # 開発用
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend' # 運用用
EMAIL_HOST = "smtp.gmail.com" # GmailのSMTPサーバー
EMAIL_PORT = 587 # Gmailサーバーのポート
EMAIL_HOST_USER = e_mail # 自身のGmailアドレス（メール送信用SMTPサーバーの認証）
EMAIL_HOST_PASSWORD = password # アプリパスワード
EMAIL_USE_TLS = True # SMTPサーバーと通信する際に、TLS（セキュア）接続する


# 以下、本番環境用
DEBUG = False

try:
    # 存在する場合、ローカルの設定読み込み
    from .settings_local import *
except ImportError:
    pass

if not DEBUG:
    # Heroku settings
    import dj_database_url
    import logging
    logger = logging.getLogger(__name__)

    ALLOWED_HOSTS = ["*"]

    # Static files (CSS, JavaScript, Images)
    STATIC_ROOT = BASE_DIR / "staticfiles"
    STATIC_URL = 'static/'
    
    WHITENOISE_KEEP_ONLY_HASHED_FILES = True

    if 'DATABASE_URL' in os.environ:
        logger.info('Adding $DATABASE_URL to default DATABASE Django setting.')

        # Configure Django for DATABASE_URL environment variable.
        db_from_env = dj_database_url.config()
        DATABASES = {
            'default': dj_database_url.config()
                    }

        # Enable test database if found in CI environment.
        if 'CI' in os.environ:
            DATABASES['default']['TEST'] = DATABASES['default']

    else:
        logger.info('$DATABASE_URL not found, falling back to previous settings!')
    
    INSTALLED_APPS = [
    # Use WhiteNoise's runserver implementation instead of the Django default, for dev-prod parity.
    "whitenoise.runserver_nostatic",
    # Uncomment this and the entry in `urls.py` if you wish to use the Django admin feature:
    # https://docs.djangoproject.com/en/5.0/ref/contrib/admin/
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'python_learning_app',
    ]

    MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    ]

    if 'SECRET_KEY' in os.environ:
        logger.info('Adding $SECRET_KEY to SECRET_KEY Django setting.')
        # Set the Django setting from the environment variable.
        SECRET_KEY = os.environ['SECRET_KEY']
